
# Name your project! Project names should contain only lowercase characters
# and underscores. A good package name should reflect your organization's
# name or the intended use of these models
name: 'hubs'
version: '1.0.1'
config-version: 2

# This setting configures which "profile" dbt uses for this project.
profile: 'default'

# These configurations specify where dbt should look for different types of files.
# The `model-paths` config, for example, states that models in this project can be
# found in the "models/" directory. You probably won't need to change these!
model-paths: ["models"]
analysis-paths: ["analysis"]
test-paths: ["tests"]
seed-paths: ["seeds"]
macro-paths: ["macros"]
snapshot-paths: ["snapshots"]

target-path: "target"  # directory which will store compiled SQL files
clean-targets: # directories to be removed by `dbt clean`
  - "target"
  - "dbt_packages" 

# Model config
models:

  hubs:
    1_base:
      +schema: core
      +materialized: view
      +bind: false
      advertising:
        bing_ads:
          +tags: ["advertising", "bing"]
        google_ads:
          +tags: ["advertising", "google"]
      freshdesk:
        +tags: freshdesk
      hubspot:
        +tags: ["hubspot", "crm"]
      int_service_supply:
        +tags: supply
      netsuite:
        +tags: ["netsuite", "finance"]

    2_prep:
      +schema: core
      +materialized: view
      +bind: false


    3_staging:
      +schema: core
      +materialized: table
      orders:
        +tags: ["orders"]
      contacts:
        +tags: ["contacts"]
      +bind: false

    4_reporting: 
      +schema: reporting
      +materialized: table

    5_protolabs:
      +schema: protolabs 
      +materialized: table
      post-hook: 'grant select on {{ this }} to protolabs'
      +tags: protolabs

    6_miscellaneous:
      +schema: core
      +materialized: table
      adhoc_refresh:
        +tags: ["adhoc"]
      weekly_refresh:
        +tags: ["weekly"]
      backup_refresh:
        +tags: ["backup"]
          post-hook: 'grant all on schema dbt_backups to group etl; grant all on schema dbt_backups to group dbt_devs;grant all on all tables in schema dbt_backups to group etl; grant all on all tables in schema dbt_backups to group dbt_devs;'


# Seeds schema
seeds:
  +schema: seed

# Snapshot configuration
snapshots:
  +target_schema: dbt_prod_snapshots # TODO: figure out proper way to run in user schema for testing

# Tests
# Can be found in models/schema.yml

# Access
# On run-end read-only access is granted to the ro_group in Redshift on the target schema's contents.
on-run-end:
  - "{{ grant_select_on_schemas(schemas, 'ro_group') }}"
